// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using TinkoffPortfolios;
//
//    var welcome = Welcome.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace TinkoffPortfolios
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class TinkoffPortfolio
    {
        [JsonPropertyName("portfolios")]
        public List<Portfolio> Portfolios { get; set; }

        [JsonPropertyName("totals")]
        public Totals Totals { get; set; }
    }

    public partial class Portfolio
    {
        [JsonPropertyName("brokerAccount")]
        public BrokerAccount BrokerAccount { get; set; }

        [JsonPropertyName("positions")]
        public List<Position> Positions { get; set; }

        [JsonPropertyName("virtualPositions")]
        public List<object> VirtualPositions { get; set; }

        [JsonPropertyName("fullAmount")]
        public FullAmount FullAmount { get; set; }

        [JsonPropertyName("fullAmountVirtual")]
        public FullAmountVirtual FullAmountVirtual { get; set; }

        [JsonPropertyName("portfolioFullAmountByCurrency")]
        public Dictionary<string, double> PortfolioFullAmountByCurrency { get; set; }

        [JsonPropertyName("positionsFullAmountGroupedByCurrency")]
        public Dictionary<string, double> PositionsFullAmountGroupedByCurrency { get; set; }

        [JsonPropertyName("portfolioYield")]
        public Yield PortfolioYield { get; set; }

        [JsonPropertyName("portfolioYieldPerDay")]
        public Yield PortfolioYieldPerDay { get; set; }

        [JsonPropertyName("portfolioAverageYield")]
        public Yield PortfolioAverageYield { get; set; }
    }

    public partial class BrokerAccount
    {
        [JsonPropertyName("brokerAccountId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long BrokerAccountId { get; set; }

        [JsonPropertyName("order")]
        public long Order { get; set; }

        [JsonPropertyName("isVisible")]
        public bool IsVisible { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("status")]
        public string Status { get; set; }
    }

    public partial class FullAmount
    {
        [JsonPropertyName("bonds")]
        public AbsoluteClass Bonds { get; set; }

        [JsonPropertyName("stocks")]
        public AbsoluteClass Stocks { get; set; }

        [JsonPropertyName("etf")]
        public AbsoluteClass Etf { get; set; }

        [JsonPropertyName("currency")]
        public AbsoluteClass Currency { get; set; }

        [JsonPropertyName("sp")]
        public AbsoluteClass Sp { get; set; }

        [JsonPropertyName("futures")]
        public AbsoluteClass Futures { get; set; }

        [JsonPropertyName("options")]
        public AbsoluteClass Options { get; set; }

        [JsonPropertyName("portfolio")]
        public AbsoluteClass Portfolio { get; set; }
    }

    public partial class AbsoluteClass
    {
        [JsonPropertyName("value")]
        public double Value { get; set; }

        [JsonPropertyName("currency")]
        public Currency Currency { get; set; }

        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class FullAmountVirtual
    {
        [JsonPropertyName("stocks")]
        public AbsoluteClass Stocks { get; set; }

        [JsonPropertyName("etf")]
        public AbsoluteClass Etf { get; set; }
    }

    public partial class Yield
    {
        [JsonPropertyName("absolute")]
        public AbsoluteClass Absolute { get; set; }

        [JsonPropertyName("relative")]
        public double Relative { get; set; }
    }

    public partial class Position
    {
        [JsonPropertyName("positionUid")]
        public Guid PositionUid { get; set; }

        [JsonPropertyName("instrumentUid")]
        public Guid InstrumentUid { get; set; }

        [JsonPropertyName("ticker")]
        public string Ticker { get; set; }

        [JsonPropertyName("securityType")]
        public SecurityType SecurityType { get; set; }

        [JsonPropertyName("currentBalance")]
        public double CurrentBalance { get; set; }

        [JsonPropertyName("prices")]
        public Prices Prices { get; set; }

        [JsonPropertyName("yields")]
        public Yields Yields { get; set; }

        [JsonPropertyName("portfolioPercent")]
        public double PortfolioPercent { get; set; }

        [JsonPropertyName("positionParams")]
        public PositionParams PositionParams { get; set; }

        [JsonPropertyName("limits")]
        public Limits Limits { get; set; }

        [JsonPropertyName("activeMarketingOffers")]
        public ActiveMarketingOffers ActiveMarketingOffers { get; set; }

        [JsonPropertyName("isBlockedTradeClearingAccount")]
        public bool IsBlockedTradeClearingAccount { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("pricesByCurrency")]
        public PricesByCurrency PricesByCurrency { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("blockedQuantity")]
        public double? BlockedQuantity { get; set; }
    }

    public partial class ActiveMarketingOffers
    {
        [JsonPropertyName("noLossesPlus")]
        public bool NoLossesPlus { get; set; }
    }

    public partial class Limits
    {
        // [JsonPropertyName("sell")]
        // public long Sell { get; set; }

        // [JsonPropertyName("stopLoss")]
        // public long StopLoss { get; set; }

        // [JsonPropertyName("stopLimit")]
        // public long StopLimit { get; set; }

        // [JsonPropertyName("takeProfit")]
        // public long TakeProfit { get; set; }
    }

    public partial class PositionParams
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("isin")]
        public string Isin { get; set; }

        [JsonPropertyName("displayParams")]
        public DisplayParams DisplayParams { get; set; }

        [JsonPropertyName("isOtc")]
        public bool IsOtc { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("tradingAvailabilityDescription")]
        public string TradingAvailabilityDescription { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("baseCurrency")]
        public string BaseCurrency { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("nkd")]
        public AbsoluteClass Nkd { get; set; }
    }

    public partial class DisplayParams
    {
        [JsonPropertyName("showName")]
        public string ShowName { get; set; }

        [JsonPropertyName("logoName")]
        public string LogoName { get; set; }

        [JsonPropertyName("textColor")]
        public TextColor TextColor { get; set; }

        [JsonPropertyName("logoColor")]
        public string LogoColor { get; set; }
    }

    public partial class Prices
    {
        [JsonPropertyName("currentPrice")]
        public AbsoluteClass CurrentPrice { get; set; }

        [JsonPropertyName("averagePositionPrice")]
        public AbsoluteClass AveragePositionPrice { get; set; }

        [JsonPropertyName("avgCostPrice")]
        public AvgCostPrice AvgCostPrice { get; set; }

        [JsonPropertyName("fullAmount")]
        public AbsoluteClass FullAmount { get; set; }
    }

    public partial class AvgCostPrice
    {
        [JsonPropertyName("average")]
        public AbsoluteClass Average { get; set; }

        [JsonPropertyName("daily")]
        public AbsoluteClass Daily { get; set; }
    }

    public partial class PricesByCurrency
    {
        [JsonPropertyName("currentPrice")]
        public AveragePositionPrice CurrentPrice { get; set; }

        [JsonPropertyName("averagePositionPrice")]
        public AveragePositionPrice AveragePositionPrice { get; set; }

        [JsonPropertyName("avgCostPriceAverage")]
        public AveragePositionPrice AvgCostPriceAverage { get; set; }

        [JsonPropertyName("avgCostPriceDaily")]
        public AveragePositionPrice AvgCostPriceDaily { get; set; }
    }

    public partial class AveragePositionPrice
    {
        [JsonPropertyName("RUB")]
        public double Rub { get; set; }

        [JsonPropertyName("USD")]
        public double Usd { get; set; }

        [JsonPropertyName("EUR")]
        public double Eur { get; set; }
    }

    public partial class Yields
    {
        [JsonPropertyName("yield")]
        public Yield Yield { get; set; }

        [JsonPropertyName("yieldPerDay")]
        public Yield YieldPerDay { get; set; }

        [JsonPropertyName("yieldAverage")]
        public Yield YieldAverage { get; set; }
    }

    public partial class Totals
    {
        [JsonPropertyName("fullAmount")]
        public AbsoluteClass FullAmount { get; set; }

        [JsonPropertyName("yield")]
        public Yield Yield { get; set; }

        [JsonPropertyName("yieldPerDay")]
        public Yield YieldPerDay { get; set; }
    }

    public enum Currency { Rub, Usd };

    public enum TypeEnum { PriceInMoney };

    public enum TextColor { Ffffff, The000000 };

    public enum SecurityType { Bond, Currency, Etf, Stock };

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonSerializer.Deserialize<Welcome>(json, TinkoffPortfolios.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonSerializer.Serialize(self, TinkoffPortfolios.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                CurrencyConverter.Singleton,
                TypeEnumConverter.Singleton,
                TextColorConverter.Singleton,
                SecurityTypeConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class ParseStringConverter : JsonConverter<long>
    {
        public override bool CanConvert(Type t) => t == typeof(long);

        public override long Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value.ToString(), options);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class CurrencyConverter : JsonConverter<Currency>
    {
        public override bool CanConvert(Type t) => t == typeof(Currency);

        public override Currency Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "RUB":
                    return Currency.Rub;
                case "USD":
                    return Currency.Usd;
            }
            throw new Exception("Cannot unmarshal type Currency");
        }

        public override void Write(Utf8JsonWriter writer, Currency value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Currency.Rub:
                    JsonSerializer.Serialize(writer, "RUB", options);
                    return;
                case Currency.Usd:
                    JsonSerializer.Serialize(writer, "USD", options);
                    return;
            }
            throw new Exception("Cannot marshal type Currency");
        }

        public static readonly CurrencyConverter Singleton = new CurrencyConverter();
    }

    internal class TypeEnumConverter : JsonConverter<TypeEnum>
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum);

        public override TypeEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "price_in_money")
            {
                return TypeEnum.PriceInMoney;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void Write(Utf8JsonWriter writer, TypeEnum value, JsonSerializerOptions options)
        {
            if (value == TypeEnum.PriceInMoney)
            {
                JsonSerializer.Serialize(writer, "price_in_money", options);
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class TextColorConverter : JsonConverter<TextColor>
    {
        public override bool CanConvert(Type t) => t == typeof(TextColor);

        public override TextColor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "#000000":
                    return TextColor.The000000;
                case "#ffffff":
                    return TextColor.Ffffff;
            }
            throw new Exception("Cannot unmarshal type TextColor");
        }

        public override void Write(Utf8JsonWriter writer, TextColor value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case TextColor.The000000:
                    JsonSerializer.Serialize(writer, "#000000", options);
                    return;
                case TextColor.Ffffff:
                    JsonSerializer.Serialize(writer, "#ffffff", options);
                    return;
            }
            throw new Exception("Cannot marshal type TextColor");
        }

        public static readonly TextColorConverter Singleton = new TextColorConverter();
    }

    internal class SecurityTypeConverter : JsonConverter<SecurityType>
    {
        public override bool CanConvert(Type t) => t == typeof(SecurityType);

        public override SecurityType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "bond":
                    return SecurityType.Bond;
                case "currency":
                    return SecurityType.Currency;
                case "etf":
                    return SecurityType.Etf;
                case "stock":
                    return SecurityType.Stock;
            }
            throw new Exception("Cannot unmarshal type SecurityType");
        }

        public override void Write(Utf8JsonWriter writer, SecurityType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case SecurityType.Bond:
                    JsonSerializer.Serialize(writer, "bond", options);
                    return;
                case SecurityType.Currency:
                    JsonSerializer.Serialize(writer, "currency", options);
                    return;
                case SecurityType.Etf:
                    JsonSerializer.Serialize(writer, "etf", options);
                    return;
                case SecurityType.Stock:
                    JsonSerializer.Serialize(writer, "stock", options);
                    return;
            }
            throw new Exception("Cannot marshal type SecurityType");
        }

        public static readonly SecurityTypeConverter Singleton = new SecurityTypeConverter();
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
